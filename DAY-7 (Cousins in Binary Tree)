/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int dpt(TreeNode* root,int f,int ct)
    {
        if(root==NULL)
            return 0;
        else if(root->val==f)
            return ct;
        else
        {
            return max(dpt(root->left,f,ct+1),dpt(root->right,f,ct+1));
        }
    }
    TreeNode* bpt(TreeNode* root,int f,TreeNode* proot)
    {
        if(root==NULL)
            return NULL;
        else if(root->val==f)
            return proot;
        else
        {
            TreeNode* r1=(bpt(root->left,f,root));
            TreeNode* r2=(bpt(root->right,f,root));
            if(r1==NULL)
                return r2;
            else 
                return r1;
        }
    }
    bool isCousins(TreeNode* root, int x, int y) {
        TreeNode *f1=bpt(root,x,root);
        TreeNode *f2=bpt(root,y,root);
        TreeNode *f3=root;
        if(f1!=f2)
        {
            int yy=dpt(root,y,0);
            int xx=dpt(root,x,0);
            
            if(xx==yy)
                return true;
            else 
                return false;
        }
        //cout<<"10";
        return false;
    }
};
